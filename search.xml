<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>Java常用日志框架</title>
      <link href="/2018/07/26/Java%E5%B8%B8%E7%94%A8%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6%E4%BB%8B%E7%BB%8D/"/>
      <url>/2018/07/26/Java%E5%B8%B8%E7%94%A8%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6%E4%BB%8B%E7%BB%8D/</url>
      <content type="html"><![CDATA[<hr><h3 id="Java常用日志框架介绍"><a href="#Java常用日志框架介绍" class="headerlink" title="Java常用日志框架介绍"></a>Java常用日志框架介绍</h3><ul><li><strong>Log4j</strong>  Apache Log4j是一个基于Java的日志记录工具。它是由Ceki Gülcü首创的，现在则是Apache软件基金会的一个项目。 Log4j是几种Java日志框架之一。 </li><li><strong>Log4j2</strong> Apache Log4j 2是apache开发的一款Log4j的升级产品。 </li><li><strong>Commons Logging</strong>  Apache基金会所属的项目，是一套Java日志接口，之前叫Jakarta Commons Logging，后更名为Commons Logging。 </li><li><strong>Slf4j</strong> 类似于Commons Logging，是一套简易Java日志门面，本身并无日志的实现。（Simple Logging Facade for Java，缩写Slf4j）。 </li><li><strong>Logback</strong>  一套日志组件的实现(slf4j阵营)。 </li><li><strong>Jul</strong> (Java Util Logging),自Java1.4以来的官方日志实现。 </li></ul><h3 id="Java常用框架历史"><a href="#Java常用框架历史" class="headerlink" title="Java常用框架历史"></a>Java常用框架历史</h3><ul><li>1996年早期，欧洲安全电子市场项目组决定编写它自己的程序跟踪API(Tracing API)。经过不断的完善，这个API终于成为一个十分受欢迎的Java日志软件包，即Log4j。后来Log4j成为Apache基金会项目中的一员。 </li><li>期间Log4j近乎成了Java社区的日志标准。据说Apache基金会还曾经建议sun引入Log4j到java的标准库中，但Sun拒绝了。 </li><li>2002年Java1.4发布，Sun推出了自己的日志库JUL(Java Util Logging),其实现基本模仿了Log4j的实现。在JUL出来以前，log4j就已经成为一项成熟的技术，使得log4j在选择上占据了一定的优势。 </li><li>接着，Apache推出了Jakarta Commons Logging，JCL只是定义了一套日志接口(其内部也提供一个Simple Log的简单实现)，支持运行时动态加载日志组件的实现，也就是说，在你应用代码里，只需调用Commons Logging的接口，底层实现可以是log4j，也可以是Java Util Logging。 </li><li>后来(2006年)，Ceki Gülcü不适应Apache的工作方式，离开了Apache。然后先后创建了slf4j(日志门面接口，类似于Commons Logging)和Logback(Slf4j的实现)两个项目，并回瑞典创建了QOS公司，QOS官网上是这样描述Logback的：The Generic，Reliable Fast&amp;Flexible Logging Framework(一个通用，可靠，快速且灵活的日志框架)。 </li><li>现今，Java日志领域被划分为两大阵营：Commons Logging阵营和SLF4J阵营。 </li><li>Apache眼看有被Logback反超的势头，于2012-07重写了log4j 1.x，成立了新的项目Log4j 2。Log4j 2具有logback的所有特性。</li></ul><h3 id="java常用日志框架之间的关系"><a href="#java常用日志框架之间的关系" class="headerlink" title="java常用日志框架之间的关系"></a>java常用日志框架之间的关系</h3><ul><li>Log4j2与Log4j1发生了很大的变化，log4j2不兼容log4j1。 Log4j 2包含基于LMAX Disruptor库的下一代异步记录器。在多线程场景中，异步记录器的吞吐量比Log4j 1.x和Logback高18倍，延迟低。 Log4j 2明显优于Log4j 1.x，Logback和java.util.logging，尤其是在多线程应用程序中。 </li><li>Commons Logging和Slf4j是日志门面(门面模式是软件工程中常用的一种软件设计模式，也被称为正面模式、外观模式。它为子系统中的一组接口提供一个统一的高层接口，使得子系统更容易使用)。log4j和Logback则是具体的日志实现方案。可以简单的理解为接口与接口的实现，调用这只需要关注接口而无需关注具体的实现，做到解耦。 </li><li>比较常用的组合使用方式是Slf4j与Logback组合使用，Commons Logging与Log4j组合使用。 </li><li>Logback必须配合Slf4j使用。由于Logback和Slf4j是同一个作者，其兼容性不言而喻。 </li></ul><h3 id="Commons-Logging与Slf4j实现机制对比"><a href="#Commons-Logging与Slf4j实现机制对比" class="headerlink" title="Commons Logging与Slf4j实现机制对比"></a>Commons Logging与Slf4j实现机制对比</h3><ul><li>Commons logging是通过动态查找机制，在程序运行时，使用自己的ClassLoader寻找和载入本地具体的实现。详细策略可以查看commons-logging-*.jar包中的org.apache.commons.logging.impl.LogFactoryImpl.java文件。由于OSGi不同的插件使用独立的ClassLoader，OSGI的这种机制保证了插件互相独立, 其机制限制了commons logging在OSGi中的正常使用。 </li><li>Slf4j在编译期间，静态绑定本地的LOG库，因此可以在OSGi中正常使用。它是通过查找类路径下org.slf4j.impl.StaticLoggerBinder，然后绑定工作都在这类里面进。 </li></ul><h3 id="如何在项目中选择日志框架"><a href="#如何在项目中选择日志框架" class="headerlink" title="如何在项目中选择日志框架"></a>如何在项目中选择日志框架</h3><p>如果是在一个新的项目中建议使用Slf4j与Logback组合，这样有如下的几个优点。 </p><ul><li><p>Slf4j实现机制决定Slf4j限制较少，使用范围更广。由于Slf4j在编译期间，静态绑定本地的LOG库使得通用性要比Commons logging要好。 </p></li><li><p>Logback拥有更好的性能。Logback声称：某些关键操作，比如判定是否记录一条日志语句的操作，其性能得到了显著的提高。这个操作在Logback中需要3纳秒，而在Log4J中则需要30纳秒。LogBack创建记录器（logger）的速度也更快：13毫秒，而在Log4J中需要23毫秒。更重要的是，它获取已存在的记录器只需94纳秒，而Log4J需要2234纳秒，时间减少到了1/23。跟JUL相比的性能提高也是显著的。 </p></li><li><p>Commons Logging开销更高 在使Commons Logging时为了减少构建日志信息的开销，通常的做法是：</p><p><code>if(log.isDebugEnabled()){</code></p><p>​    <code>log.debug(&quot;User name： &quot; + user.getName() + &quot; buy goods id ：&quot; + good.getId());</code> </p><p><code>}</code> </p><p>在Slf4j阵营，你只需这么做：</p><p> <code>log.debug(&quot;User name：{} ,buy goods id ：{}&quot;, user.getName(),good.getId());</code> </p><p>也就是说，slf4j把构建日志的开销放在了它确认需要显示这条日志之后，减少内存和cup的开销，使用占位符号，代码也更为简洁 。</p></li><li><p>Logback文档免费。Logback的所有文档是全面免费提供的，不象Log4J那样只提供部分免费文档而需要用户去购买付费文档。 </p></li></ul><h3 id="如何在项目中使用self4j"><a href="#如何在项目中使用self4j" class="headerlink" title="如何在项目中使用self4j"></a>如何在项目中使用self4j</h3><p><strong>直接使用slf4j来输入日志的方式</strong></p><p><img src="/2018/07/26/Java常用日志框架介绍/concrete-bindings.png" alt="concrete-bindings"></p><p>这里引用了slf4j官网的图，<a href="https://www.slf4j.org/manual.html" target="_blank" rel="noopener">去官网查阅可以点击这里</a></p><p>简单说一下对上图的理解：</p><ul><li>图中第一层绿色的模块application代表你的应用程序</li><li>图中第二层浅蓝色的模块，代表是抽象的日志接口层，这里用的是<em>slf4j</em></li><li>图中第三层分为两种：<ul><li>一种是深蓝色的，表示的是第二层中<em>slf4j</em>日志接口的直接实现,直接实现了<em>slf4j</em>的日志框架有logback、slf4j-simple（slf4j的简单实现）、 slf4j-nop（丢弃日志不打印）</li><li>另外一中湖蓝色的，表示是没有直接实现<em>slf4j</em>的API，而是通过适配器调用其它具体日志框架的API，这里包括<em>slf4j</em>到log4j的适配和<em>slf4j</em>到Jul的适配。</li></ul></li><li>第四层灰色的模块表示具体的日志框架，他们没有直接实现<em>slf4j</em>的API，但是可以通过上层的适配器与<em>slf4j</em>做适配实现日志管理。</li></ul><p><strong>如果你的应用包含其他模块，但这些模块没有使用slf4j，而是使用了其他日志框架，不要担心，<em>slf4j</em>提供了一些包可以将系统中其他日志转到slf4j做一个统一输出，具体可以参考<em>slf4j</em>官网的这幅图</strong></p><p><img src="/2018/07/26/Java常用日志框架介绍/legacy.png" alt="legacy"></p><p><a href="https://www.slf4j.org/legacy.html" target="_blank" rel="noopener">去官网查阅可以点击这里</a></p><p>上图中从左到右再到下分别为图一、图二、图三</p><ul><li>图一表示使用<em>slf4j</em>作为统一日志输出，将程序中原有的Commons Longing、Log4j、Jul日志适配到slf4j  </li></ul><table><thead><tr><th>jar包名</th><th>作用</th></tr></thead><tbody><tr><td><strong>log4j-over-slf4j-version.jar</strong></td><td>将log4j适配到slf4j</td></tr><tr><td><strong>jcl-over-slf4j-version.jar</strong></td><td>将commos logging适配到slf4j</td></tr><tr><td><strong>jul-to-slf4j-version.jar</strong></td><td>将Java Util Logging适配到slf4j</td></tr></tbody></table><p>  可以通过上面的包将原来的日志适配到<em>slf4j</em>作为统一日志输出，使用logback作为具体日志实现。</p><ul><li>图二、三原理类似，只是更换了slf4j的日志实现方式。</li></ul><p><strong>注意</strong></p><p>如果有其它日志重定向到了<em>slf4j</em>，就不能将该日志再作为<em>slf4j</em>的具体实现了，否则会形成闭环（<em>该日志将输出重定向到slf4j，slf4j又将日志输出到该日志</em>），所以将其它日志重定向到slf4j的方式只有如上三种搭配组合方式。</p><hr><p><strong>上面介绍使用slf4j作为统一日志输出，将其它日志适配到slf4j，以及slf4j绑定具体日志实现，这些适配功能的jar包和适配器相关的jar包都是由slf4j提供的，Apache作为log4j的维护方，也提供了一些桥接器，更好的支持log4j 2</strong></p><table><thead><tr><th>jar包</th><th>作用</th></tr></thead><tbody><tr><td><strong>log4j-1.2-api</strong></td><td>将log4j 2作为log4j 1.x 的具体实现（<em>两者不兼容</em>）</td></tr><tr><td><strong>log4j-jcl</strong></td><td>将log4j 2作为jcl 的具体实现</td></tr><tr><td><strong>log4j-slf4j-impl</strong></td><td>将log4j 2作为slf4j的具体实现</td></tr></tbody></table><p><a href="https://logging.apache.org/log4j/2.x/maven-artifacts.html" target="_blank" rel="noopener">去log4j 2官网查看点击这里</a></p><p><strong>参考链接</strong></p><p><a href="https://www.cnblogs.com/chenhongliang/p/5312517.html" target="_blank" rel="noopener">Java常用日志框架介绍</a></p><p><a href="https://www.slf4j.org/" target="_blank" rel="noopener">slf4j官网</a></p><p><a href="https://logging.apache.org/log4j/2.x/" target="_blank" rel="noopener">log4j 2官网</a></p>]]></content>
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日志 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>使用Hexo搭建个人博客</title>
      <link href="/2018/07/25/%E4%BD%BF%E7%94%A8Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2018/07/25/%E4%BD%BF%E7%94%A8Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      <content type="html"><![CDATA[<p>记录一下自己使用Hexo搭建个人博客的过程，以及搭建过程中踩过的坑。<br> <strong>Hexo简介</strong><br> 　　这里引用<a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>官网介绍：<br>    &gt; 快速、简洁且高效的博客框架<br>    &gt; A fast, simple &amp; powerful blog framework.</p><p>不了解的小伙伴可以到官网去详细了解一下，主页中有选择语言的选项，英文勉强的同学（说我的就是我自己）可以选择中文阅览,这里不再赘述。</p>]]></content>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Netty简介</title>
      <link href="/2018/07/25/%E6%B7%B1%E5%85%A5%E5%AD%A6%E4%B9%A0Netty%E6%A1%86%E6%9E%B6/"/>
      <url>/2018/07/25/%E6%B7%B1%E5%85%A5%E5%AD%A6%E4%B9%A0Netty%E6%A1%86%E6%9E%B6/</url>
      <content type="html"><![CDATA[<p><strong>官网简介：</strong><br>　　<code>Netty is an asynchronous event-driven network application framework for rapid development of maintainable high performance protocol servers &amp; clients.</code><br><strong>用一句话来概括：</strong><br>　　Netty是一个异步事件驱动的网络应用框架，用于快速开发可维护的高性能协议服务器和客户端。  </p><hr><h4 id="特征"><a href="#特征" class="headerlink" title="特征"></a>特征</h4><p><strong>设计</strong>  </p><ul><li>适用于各种传输类型的统一API - 阻塞和非阻塞套接字</li><li>基于灵活且可扩展的事件模型，可以清晰地分离关注点</li><li>高度可定制的线程模型 - 单线程，一个或多个线程池，如SEDA</li><li>真正的无连接数据报套接字支持（自3.1起）  </li></ul><p><strong>易用</strong></p><ul><li>详细记录的Javadoc，用户指南和示例</li><li>没有其他依赖项，JDK 5（Netty 3.x）或6（Netty 4.x）就足够了</li></ul><p><strong>性能</strong></p><ul><li>吞吐量更高，延迟更低</li><li>减少资源消耗</li><li>最小化不必要的内存复制</li></ul><p><strong>安全</strong></p><ul><li>完整的SSL / TLS和StartTLS支持</li></ul><hr><h4 id="架构示意图"><a href="#架构示意图" class="headerlink" title="架构示意图"></a>架构示意图</h4><p><img src="/2018/07/25/深入学习Netty框架/components.png" alt="Netty框架图"></p>]]></content>
      
      
        <tags>
            
            <tag> netty </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hello World</title>
      <link href="/2018/07/24/hello-world/"/>
      <url>/2018/07/24/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
    </entry>
    
  
  
</search>
